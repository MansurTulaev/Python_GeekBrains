import math

# 1-Напишите программу, которая принимает на вход цифру, обозначающую день недели, и проверяет, является ли этот день
# выходным.
int_input = int(input("Введите число: "))
if int_input == 6 or int_input == 7:
    print("да")
else:
    print("нет")

# 2-Напишите программу для. проверки истинности утверждения ¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат.
# Предикату можно заменить на понятие "бит".
# Должна получиться таблица истинности.
m, n, z = map(int, input("Введите три бита: ").split())
result = (not(m or n or z)) == ((not m) or (not n) or (not z))
if result:
    print("Утверждение истинно")
else:
    print("Утверждение ложно")

# 3- Напишите программу, которая принимает на вход координаты точки (X и Y), причём X ≠ 0 и Y ≠ 0 и выдаёт номер
# четверти плоскости, в которой находится эта точка (или на какой оси она находится).
x = int(input("ВВедите коордианту X: "))
y = int(input("Введите координату Y: "))
if x > 0 and y > 0:
    print("1")
elif x < 0 and y > 0:
    print("2")
elif x < 0 and y < 0:
    print("3")
elif x > 0 and y < 0:
    print("4")

# 4- Напишите программу, которая по заданному номеру четверти, показывает диапазон возможных координат точек в этой
# четверти (x и y).
quarter = int(input("Введите четверть: "))
if quarter == 1:
    print("Значения x от 0 до ", math.inf, "\n", "Значения y от 0 до ", math.inf)
if quarter == 2:
    print("Значения x от ", -math.inf, " до 0", "\n", "Значения y от 0 до ", -math.inf)
if quarter == 3:
    print("Значения x от ", -math.inf, " до 0", "\n", "Значения y от ", -math.inf, " до 0")
else:
    print("Значения x от 0 до ", math.inf, "\n", "Значения y от ", -math.inf, " до 0")

# 5-Напишите программу, которая принимает на вход координаты двух точек
# и находит расстояние между ними в 2D пространстве.
a, b = map(int, input("Введите два числа координаты для первой точки: ").split())
c, d = map(int, input("Введите два числа координаты для второй точки: ").split())
distance = math.sqrt(((a - c) ** 2) + ((b - d) ** 2))
print("Расстояние между точками равно: ", distance)
